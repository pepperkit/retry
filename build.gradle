import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'org.sonarqube' version '3.1.1'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.pepperkit'
version '1.0.0'

sonarqube {
    properties {
        property "sonar.projectKey", "aukhatov_retry"
        property "sonar.organization", "aukhatov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco.xml"
    }
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion '9.2.1'
    config project.resources.text
            .fromUri(new URI("https://raw.githubusercontent.com/pepperkit/checkstyle/v1.0.2-9.2/checkstyle.xml"))
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        def buildDate = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)
        attributes(
                'Project': project.name,
                'Version': "${archiveVersion.get()}",
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Created-By': 'Pepper Kit https://pepperkit.github.io/'
        )
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/content/repositories/releases/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username "$System.env.USERNAME"
                password "$System.env.PASSWORD"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId project.name
            groupId group
            version version
            artifact  "${buildDir}/libs/${project.name}-${version}.jar"

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            pom {
                name = project.name
                description = 'This is a simple and lightweight retry library for Java. It helps you transparently retry failed operations.'
                url = 'https://pepperkit.github.io/'
                packaging 'jar'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/pepperkit/retry/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'aaukhatov'
                        name = 'Artur Aukhatov'
                        email = 'aaukhatov@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:pepperkit/retry.git'
                    developerConnection = 'scm:git:ssh://github.com:pepperkit/retry.git'
                    url = 'https://github.com/pepperkit/retry'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    def signingKey = "$System.env.GPG_KEY"
    def signingPassword = "$System.env.GPG_PASSWORD"
    useInMemoryPgpKeys(signingKey, signingPassword)
}
